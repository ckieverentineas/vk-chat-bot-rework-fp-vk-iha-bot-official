import { User } from "@prisma/client";
import path from "path";
import { HearManager } from "@vk-io/hear";
import { IQuestionMessageContext } from "vk-io-question";
import { root, starting_date } from '../index';
import { User_Access, User_Info} from './helper';
import prisma from "../module/prisma";
import { Prefab_Engine } from './prefab/prefab_engine';
import { Save_Answers_and_Question_In_DB, exportQuestionsAndAnswers } from "./parser";
import { Education_Engine } from "./education/education_egine";
import { Editor_Engine } from "./editor/editor_engine";
import { Editor_Engine_BlackList } from "./prefab/blacklist_editor";

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/!–±–∞–∑–∞/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            await Save_Answers_and_Question_In_DB(context)

        }
    })
    hearManager.hear(/!–∫–æ–Ω—Ñ–∏–≥/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true)) {
            const count_question = await prisma.question.count({})
            const count_answer = await prisma.answer.count({})
            const count_blacklist = await prisma.blackList.count({})
            await context.send(`–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: \n üî∏ –í–µ—Ä—Å–∏—è: 0.1.06 Pre-Alpha Building \n üë§ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –†–∞–∑—Ä–µ—à–µ–Ω—ã \n üë• –ë–µ—Å–µ–¥—ã: –†–∞–∑—Ä–µ—à–µ–Ω—ã \n\n ‚öô –ó–∞—â–∏—Ç—ã: üõ°–ê–Ω—Ç–∏—Å–ø–∞–º \n üõ°"–Ø –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Å—å" \n üõ°"–¢—ã –ø–æ–≤—Ç–æ—Ä—è–µ—à—å—Å—è" \n üõ°"–ú–æ–ª—á–∞—Ç—å, –∫–æ–≥–¥–∞ –¥–≤–∞ –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ" \n üõ°"–£–ø–æ–º—è–Ω—É–ª–∏ –Ω–µ –º–µ–Ω—è" \n üõ°"–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –º–Ω–µ" \n üõ°"–ò–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –ª—é–±–∏—Ç–µ–ª–µ–π –ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏" \n üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ${count_question} –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫ –Ω–∏–º: ${count_answer} \n ‚ò† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-—Å–ª–æ–≤ –≤ blacklist ${count_blacklist} \n\n üìù –ü–æ–∏—Å–∫–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏: \n üîç DirectBoost - –∏—â–µ—Ç –æ—Ç–≤–µ—Ç—ã 1 –∫ 1; \n üîç MultiBoost - –∏—â–µ—Ç –¥–ª—è –∫—É—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—á–µ—Ç–∫–æ.`)
        }
    })
    hearManager.hear(/!–ø–æ–º–æ—â—å/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true)) {
            await context.send(`‚ò† –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ:
                \nüë§ !–∏–Ω—Ñ–∞ - –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –∏ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –∫–æ–Ω–µ—á–Ω–æ –≤–∞–º –ø–æ–∫–∞–∂—É—Ç –Ω–µ –≤—Å–µ=)
                \nüë• !–∫–æ–Ω—Ñ–∏–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
                \nüë• !–∏–≥–Ω–æ—Ä idvk - –≥–¥–µ idvk, –ø–∏—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                \n‚≠ê !—é–∑–µ—Ä–¥—Ä–æ–ø - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                \n‚≠ê !–¥–∞–º–ø - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç txt –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "questions_and_answers.txt" —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É
                \nüë• !–∞–ø—Ç–∞–π–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
                \nüë• !–ø—Ä–∞–≤–∞ idvk - –≥–¥–µ idvk, –ø–∏—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                \nüåê !–æ–±—É—á–µ–Ω–∏–µ - –¥–æ—Å—Ç–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.
                \nüåê !—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ ID –≤–æ–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç.
                \nüåê !–±–ª—ç–∫–ª–∏—Å—Ç - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ ID —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ.
                \n‚≠ê !–±–∞–∑–∞ - –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∞–º —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ö—Ç —Ñ–æ—Ä–º–∞—Ç–∞: \n–í–æ–ø—Ä–æ—Å\n–û—Ç–≤–µ—Ç\n–û—Ç–≤–µ—Ç\n\n–í–æ–ø—Ä–æ—Å\n–û—Ç–≤–µ—Ç\n\n–í–æ–ø—Ä–æ—Å\n–û—Ç–≤–µ—Ç\n–û—Ç–≤–µ—Ç\n–û—Ç–≤–µ—Ç\n–û—Ç–≤–µ—Ç\n\n.....
                \nüí° –í –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–ø–∞–ø–∫–∞) book –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ txt –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫ –Ω–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∫–æ–º–∞–Ω–¥—ã !–±–∞–∑–∞.
                \n‚åöÔ∏è !–∑–ª—ã–µ—á–∞—Å—ã - –≤–≤—ã–≤–æ–¥ —á–∞—Å–æ–≤ –≤ —Å—Ç–∏–ª–µ –∞–≥—Ä–µ—Å—Å–∏–∏.
                \n‚ö† –ö–æ–º–∞–Ω–¥—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏:\nüë§ - –î–æ—Å—Ç—É–ø–Ω—ã –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º;\nüë• - –î–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞;\nüåê - –î–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –≥—Ä—É–ø–ø–æ–π.\n‚≠ê - –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ—Ç–∞`
            )
        }
    })
    hearManager.hear(/!–∏–≥–Ω–æ—Ä/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true) && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: any = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { idvk: target }, data: { ignore: user.ignore ? false : true } })
                    await context.send(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`)
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!–∑–∞–±–∞–Ω—å/, async (context) => {
        if (context.isOutbox == false) {
            const target: number = context.senderId; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if (target > 0) {
                const user: any = await prisma.user.findFirst({ where: { idvk: target } });
                if (user) {
                    const login = await prisma.user.update({
                        where: { idvk: target },
                        data: { ignore: user.ignore ? false : true } // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∏–≥–Ω–æ—Ä
                    });
                    await context.send(`@id${login.idvk}(–Æ–∑–µ—Ä) ${login.ignore ? '—Ç—ã –º–µ–Ω—è –æ–±–∏–¥–µ–ª, —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–±–µ' : '—è —Ç–µ–±—è –ø—Ä–æ—â–∞—é, –¥–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è)'}`);
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`);
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }
        }
    });
    
    hearManager.hear(/!–ø—Ä–∞–≤–∞/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true) && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: User | null = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { idvk: target }, data: { root: user.root ? false : true } })
                    await context.send(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.root ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.root ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!—é–∑–µ—Ä–¥—Ä–æ–ø/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root)) {
            const user: User[] | null = await prisma.user.findMany({})
            if (user && user.length >= 1) {
                for (const i in user) {
                    const login = await prisma.user.delete({ where: { id: user[i].id } })
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –±—ã–ª —É–¥–∞–ª–µ–Ω`)
                }
                await context.send(`‚öô –í–Ω–∏–º–∞–Ω–∏–µ, –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${user.length}`)
            } else {
                await context.send(`‚öô –û–±–∏–¥–Ω–æ, –Ω–æ –Ω–µ–∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å... –£–≤—ã`)
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`)
            }
        }
    })
    hearManager.hear(/!–∏–Ω—Ñ–∞/, async (context) => {
        if (await Prefab_Engine(context)) { return; }
        if (context.isOutbox == false) {
            const user: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
            const info: any = await User_Info(context)
            if (user) {
                await context.send(` üë§ –ò–º—è: @id${user.idvk}(${info.first_name}): \n\n üí≥ –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${user.id} \n üé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${user.idvk} \n ‚ö† –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${user.warning}/3 \n ‚ö∞ –î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: ${user.crdate} \n ‚õì –°—Ç–∞—Ç—É—Å: ${user.ignore ? '–í —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ' : '–ó–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω—ã'} \n üî∏ –ù–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–∞–ø—Å—É–ª–µ: 0.1.06 Pre-Alpha Building \n `)
            }
        }
    })
    hearManager.hear(/!–¥–∞–º–ø/, async (context) => {
        if (!context.isOutbox && context.senderId === root && context?.text !== undefined) {
            try {
                await context.send('–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–ª–∏–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
                console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–ª–∏–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                await exportQuestionsAndAnswers();
                await context.send('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...');
                const filePath = path.resolve('questions_and_answers.txt'); // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                await context.sendDocuments({
                    value: filePath,
                    filename: 'questions_and_answers.txt',
                });
    
                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã !–¥–∞–º–ø:', error);
                await context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
            }
        }
    });
    
    hearManager.hear(/!–∞–ø—Ç–∞–π–º/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true) && context?.text != undefined) {
            const now = new Date();
            const diff = now.getTime() - starting_date.getTime();
            const timeUnits = [
                { unit: "–¥–Ω–µ–π", value: Math.floor(diff / 1000 / 60 / 60 / 24) },
                { unit: "—á–∞—Å–æ–≤", value: Math.floor((diff / 1000 / 60 / 60) % 24) },
                { unit: "–º–∏–Ω—É—Ç", value: Math.floor((diff / 1000 / 60) % 60) },
                { unit: "—Å–µ–∫—É–Ω–¥", value: Math.floor((diff / 1000) % 60) },
            ];
            await context.send(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeUnits.filter(({ value }) => value > 0).map(({ unit, value }) => `${value} ${unit}`).join(" ")}`);
        }
    })
    hearManager.hear(/!–æ–±—É—á–µ–Ω–∏–µ/, async (context: any) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true) && context?.text != undefined) {
            try {
                const [group] = await context.api.groups.getById();
	            const groupId = group.id;
            } catch {
                return context.send(`–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–æ–≥—Ä—É–ø–ø–µ!`)
            }
            await context.send(`–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞!`);
            while (true) {
                const trig = await Education_Engine(context)
                if (!trig) { break }
            }
            
            await context.send(`–û–±—É—á–∏–ª–∏`);
        }
    })
    hearManager.hear(/!—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/, async (context: any) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true) && context?.text != undefined) {
            try {
                const [group] = await context.api.groups.getById();
	            const groupId = group.id;
            } catch {
                return context.send(`–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–æ–≥—Ä—É–ø–ø–µ!`)
            }
            await context.send(`–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞!`);
            while (true) {
                const trig = await Editor_Engine(context)
                if (!trig) { break }
            }
            
            await context.send(`–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏`);
        }
    })
    hearManager.hear(/!–±–ª—ç–∫–ª–∏—Å—Ç/, async (context: any) => {
        if (context.isOutbox == false && (context.senderId == root || await User_Access(context) == true) && context?.text != undefined) {
            try {
                const [group] = await context.api.groups.getById();
	            const groupId = group.id;
            } catch {
                return context.send(`–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–æ–≥—Ä—É–ø–ø–µ!`)
            }
            await context.send(`–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–µ–∫–ª–∏—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞!`);
            while (true) {
                const trig = await Editor_Engine_BlackList(context)
                if (!trig) { break }
            }
            await context.send(`–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏`);
        }
    })
}
